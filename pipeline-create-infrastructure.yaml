pool:
  name: Azure Pipelines
  # Windows is required for AWSPowerShellModuleScript@1 task
  vmImage: vs2017-win2016

variables:
  aws.region: us-east-1
  aws.credentials: CodeFuller @ AWS
  kubernetesConnectionName: AWS EKS Cluster
  sshKey: MusicFeed Key

stages:
- stage: CreateClusterStage
  displayName: Create EKS Cluster
  jobs:
  - job: CreateClusterJob
    displayName: Create EKS Cluster
    pool:
      name: Azure Pipelines
      # Windows is required for AWSPowerShellModuleScript@1 task
      vmImage: vs2017-win2016
    steps:
    - task: CloudFormationCreateOrUpdateStack@1
      displayName: 'Create Stack: EKS VPC'
      inputs:
        awsCredentials: $(aws.credentials)
        stackName: eks-vpc
        templateSource: file
        templateFile: eks-vpc.yaml
        captureStackOutputs: asVariables
        captureAsSecuredVars: false

    - task: CloudFormationCreateOrUpdateStack@1
      displayName: 'Create Stack: EKS Cluster'
      inputs:
        awsCredentials: $(aws.credentials)
        stackName: eks-cluster
        templateFile: eks-cluster.yaml
        templateParametersSource: inline
        templateParameters: |
         - ParameterKey: SubnetIds
           ParameterValue: '$(SubnetIds)'
        captureStackOutputs: asVariables
        captureAsSecuredVars: false

    - task: CloudFormationCreateOrUpdateStack@1
      displayName: 'Create Stack: EKS Nodes Group'
      inputs:
        awsCredentials: $(aws.credentials)
        stackName: eks-nodes-group
        templateFile: eks-nodes-group.yaml
        templateParametersSource: inline
        templateParameters: |
         - ParameterKey: ClusterName
           ParameterValue: '$(ClusterName)'
         - ParameterKey: SubnetIds
           ParameterValue: '$(SubnetIds)'
         - ParameterKey: OIDCProviderId
           ParameterValue: '$(OIDCProviderId)'
         - ParameterKey: SSHKey
           ParameterValue: '$(sshKey)'

    - task: CloudFormationCreateOrUpdateStack@1
      displayName: 'Create Stack: IAM Role for EKS ALB Controller'
      inputs:
        awsCredentials: $(aws.credentials)
        stackName: eks-alb-controller-role
        templateFile: eks-alb-controller-role.yaml
        templateParametersSource: inline
        templateParameters: |
         - ParameterKey: OIDCProviderId
           ParameterValue: '$(OIDCProviderId)'
        captureStackOutputs: asVariables
        captureAsSecuredVars: false

    - task: AWSPowerShellModuleScript@1
      displayName: 'Configure EKS Service Connection'
      inputs:
        awsCredentials: $(aws.credentials)
        workingDirectory: ./pipelines
        filePath: ./pipelines/configure-eks-service-connection.ps1
        arguments: '-PersonalToken $(ApiPersonalToken) -OrganizationUrl $(System.CollectionUri) -ProjectId $(System.TeamProjectId) -ProjectName $(System.TeamProject) -ClusterName $(ClusterName)'
        failOnStderr: true

    - script: |
       echo "##vso[task.setvariable variable=ClusterName;isOutput=true]$(ClusterName)"
       echo "##vso[task.setvariable variable=EKSLoadBalancerControllerRoleArn;isOutput=true]$(EKSLoadBalancerControllerRoleArn)"
      name: SetOutputVariables
      displayName: 'Set Output Variables'

- stage: DeployApplicationStage
  displayName: Deploy Application
  dependsOn: CreateClusterStage
  jobs:
  - job: DeployApplicationJob
    displayName: Deploy Application
    pool:
      name: Azure Pipelines
      vmImage: ubuntu-latest
    variables: 
      ClusterName: $[ stageDependencies.CreateClusterStage.CreateClusterJob.outputs['SetOutputVariables.ClusterName'] ]
      EKSLoadBalancerControllerRoleArn: $[ stageDependencies.CreateClusterStage.CreateClusterJob.outputs['SetOutputVariables.EKSLoadBalancerControllerRoleArn'] ]
      Namespace: musicfeed
    steps:
    - task: Kubernetes@1
      displayName: 'Install TargetGroupBinding CRDS'
      inputs:
        kubernetesServiceEndpoint: $(KubernetesConnectionName)
        command: apply
        arguments: '-k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"'
        outputFormat: none

    - task: HelmDeploy@0
      displayName: Add eks-charts Repository
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: $(KubernetesConnectionName)
        command: repo
        arguments: add eks https://aws.github.io/eks-charts

    - task: HelmDeploy@0
      displayName: Install ALB Controller
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: $(KubernetesConnectionName)
        namespace: kube-system
        command: upgrade
        chartName: eks/aws-load-balancer-controller
        releaseName: aws-load-balancer-controller
        overrideValues: |
         clusterName=$(ClusterName)
         serviceAccount.create=true
         serviceAccount.name=aws-load-balancer-controller
         serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="$(EKSLoadBalancerControllerRoleArn)"

    - task: Kubernetes@1
      displayName: Create Namespace
      inputs:
        kubernetesServiceEndpoint: $(KubernetesConnectionName)
        command: apply
        arguments: -f namespace.yaml

    - task: Kubernetes@1
      displayName: Create Ingress
      inputs:
        kubernetesServiceEndpoint: $(KubernetesConnectionName)
        command: apply
        namespace: $(Namespace)
        arguments: -f ingress.yaml
