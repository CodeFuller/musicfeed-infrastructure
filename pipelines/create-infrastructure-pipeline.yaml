name: $(Build.BuildId)

# Current pipeline results to creation of resources in AWS.
# We need to prevent automatic launches to avoid unwanted expenses.
trigger: none

variables:
  - group: MusicFeedVariables
  - name: AWSConnectionName
    value: CodeFuller @ AWS
    readonly: true
  - name: aws.region
    value: $(GlobalConfig.AWS.Region)
    readonly: true
  - name: KubernetesConnectionName
    value: AWS EKS Cluster
    readonly: true
  # Additional variables that must befined for pipeline:
  # AzureDevops.ApiToken: *****
  # AWS.HostedZoneId: Z01055552B3KYP9ID3C6O

stages:
- stage: CreateEKSClusterStage
  displayName: Create EKS Cluster
  jobs:
  - deployment: CreateEKSClusterJob
    displayName: Create EKS Cluster
    environment: aws
    pool:
      name: Azure Pipelines
      # Windows is required for AWSPowerShellModuleScript@1 task
      vmImage: windows-latest
    variables:
      sshKey: MusicFeed Key
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: CloudFormationCreateOrUpdateStack@1
            displayName: 'Create Stack: EKS VPC'
            inputs:
              awsCredentials: $(AWSConnectionName)
              stackName: eks-vpc
              templateSource: file
              templateFile: eks-vpc.yaml
              captureStackOutputs: asVariables
              captureAsSecuredVars: false

          - task: CloudFormationCreateOrUpdateStack@1
            displayName: 'Create Stack: EKS Cluster'
            inputs:
              awsCredentials: $(AWSConnectionName)
              stackName: eks-cluster
              templateSource: file
              templateFile: eks-cluster.yaml
              templateParametersSource: inline
              templateParameters: |
                - ParameterKey: SubnetIds
                  ParameterValue: '$(SubnetIds)'
              captureStackOutputs: asVariables
              captureAsSecuredVars: false

          - task: CloudFormationCreateOrUpdateStack@1
            displayName: 'Create Stack: EKS Nodes Group'
            inputs:
              awsCredentials: $(AWSConnectionName)
              stackName: eks-nodes-group
              templateSource: file
              templateFile: eks-nodes-group.yaml
              templateParametersSource: inline
              templateParameters: |
                - ParameterKey: ClusterName
                  ParameterValue: '$(ClusterName)'
                - ParameterKey: SubnetIds
                  ParameterValue: '$(SubnetIds)'
                - ParameterKey: OIDCProviderId
                  ParameterValue: '$(OIDCProviderId)'
                - ParameterKey: SSHKey
                  ParameterValue: '$(sshKey)'

          - task: AWSPowerShellModuleScript@1
            displayName: 'Configure EKS Service Connection'
            inputs:
              awsCredentials: $(AWSConnectionName)
              workingDirectory: ./pipelines
              filePath: ./pipelines/configure-eks-service-connection.ps1
              arguments: '-PersonalToken $(AzureDevops.ApiToken) -OrganizationUrl $(System.CollectionUri) -ProjectId $(System.TeamProjectId) -ProjectName "$(System.TeamProject)" -ClusterName "$(ClusterName)"'
              failOnStderr: true

          - powershell: |
              Write-Host "##vso[task.setvariable variable=ClusterName;isOutput=true]$(ClusterName)"
              Write-Host "##vso[task.setvariable variable=OIDCProviderId;isOutput=true]$(OIDCProviderId)"
            name: SetOutputVariables
            displayName: 'Set Output Variables'

- stage: ConfigureEKSClusterStage
  displayName: Configure EKS Cluster
  dependsOn: CreateEKSClusterStage
  jobs:
  - deployment: CreateEKSClusterJob
    displayName: Configure EKS Cluster
    environment: aws
    pool:
      name: Azure Pipelines
      vmImage: ubuntu-latest
    variables: 
      ClusterName: $[ stageDependencies.CreateEKSClusterStage.CreateEKSClusterJob.outputs['CreateEKSClusterJob.SetOutputVariables.ClusterName'] ]
      OIDCProviderId: $[ stageDependencies.CreateEKSClusterStage.CreateEKSClusterJob.outputs['CreateEKSClusterJob.SetOutputVariables.OIDCProviderId'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: CloudFormationCreateOrUpdateStack@1
            displayName: 'Create Stack: IAM Roles for EKS Cluster'
            inputs:
              awsCredentials: $(AWSConnectionName)
              stackName: eks-iam-roles
              templateSource: file
              templateFile: eks-iam-roles.yaml
              templateParametersSource: inline
              templateParameters: |
                - ParameterKey: OIDCProviderId
                  ParameterValue: '$(OIDCProviderId)'
              captureStackOutputs: asVariables
              captureAsSecuredVars: false

          - task: Kubernetes@1
            displayName: 'Install TargetGroupBinding CRDS'
            inputs:
              kubernetesServiceEndpoint: $(KubernetesConnectionName)
              command: apply
              arguments: '-k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"'
              outputFormat: none

          - task: HelmDeploy@0
            displayName: Add eks-charts Repository
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceConnection: $(KubernetesConnectionName)
              command: repo
              arguments: add eks https://aws.github.io/eks-charts

          - task: HelmDeploy@0
            displayName: Install ALB Controller
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceConnection: $(KubernetesConnectionName)
              namespace: kube-system
              command: upgrade
              chartName: eks/aws-load-balancer-controller
              # We use specific version of the chart. We want to avoid implicit chart upgrade because manual actions could be required to satisfy prerequisites.
              # Upgrade instructions:
              #   1. Check whether the new version is avaialble at https://github.com/aws/eks-charts/blob/master/stable/aws-load-balancer-controller/Chart.yaml
              #   2. Check prerequisites section, version requirements and upgrade instructions at for EKS at https://github.com/aws/eks-charts/blob/master/stable/aws-load-balancer-controller/README.md#prerequisites
              #   3. Compare EKSLoadBalancerControllerPolicy with https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
              chartVersion: '1.4.2'
              releaseName: aws-load-balancer-controller
              overrideValues: |
                clusterName=$(ClusterName)
                serviceAccount.create=true
                serviceAccount.name=aws-load-balancer-controller
                serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="$(EKSLoadBalancerControllerRoleArn)"

          - task: HelmDeploy@0
            displayName: Add bitnami Repository
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceConnection: $(KubernetesConnectionName)
              command: repo
              arguments: add bitnami https://charts.bitnami.com/bitnami

          # https://github.com/bitnami/charts/tree/master/bitnami/external-dns
          # https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/aws.md
          - task: HelmDeploy@0
            displayName: Install ExternalDNS
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceConnection: $(KubernetesConnectionName)
              namespace: kube-system
              command: upgrade
              chartName: bitnami/external-dns
              chartVersion: '6.5.6'
              releaseName: external-dns
              # We pass role ARN directly as annotation to Service Account, not with aws.roleArn parameter.
              # Bitnami Helm chart for ExternalDNS does not apply aws.roleArn correctly - https://github.com/bitnami/charts/blob/master/bitnami/external-dns/templates/deployment.yaml
              # The same approach is used by some other chart users - https://docs.papercups.io/aws#setup-the-external-dns-controller
              overrideValues: |
                "serviceAccount.annotations.eks\.amazonaws\.com/role-arn"=$(ExternalDNSRoleArn)
                sources[0]=ingress
                policy=sync
                domainFilters[0]=$(GlobalConfig.DomainName)
                registry=txt
                provider=aws
                aws.zoneType=public
                txtOwnerId=/hostedzone/$(AWS.HostedZoneId)

          - task: HelmDeploy@0
            displayName: Install Kubernetes Dashboard
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceConnection: $(KubernetesConnectionName)
              command: upgrade
              chartType: FilePath
              chartPath: ./kubernetes-dashboard
              releaseName: kubernetes-dashboard
              arguments: --dependency-update
              overrideValues: |
                domainName=kubernetes-dashboard.$(GlobalConfig.DomainName)
                certificateArn=$(GlobalConfig.AWS.CertificateArn)

- template: create-resources-template.yaml
  parameters:
    envName: test
    envDisplayName: Test

- template: create-resources-template.yaml
  parameters:
    envName: prod
    envDisplayName: Production
