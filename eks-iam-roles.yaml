AWSTemplateFormatVersion: '2010-09-09'
Description: IAM Roles for EKS Cluster

Parameters:
  OIDCProviderId:
    Type: String
    Description: Id of the cluster's OIDC provider, e.g. 'oidc.eks.us-east-1.amazonaws.com/id/9FA874BC9A6D27673BDA5B90FC0F4705'

Resources:
  # https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html#aws-management-console
  EKSLoadBalancerControllerRole:
    Type: AWS::IAM::Role
    Description: IAM Role for EKS ALB Controller
    Properties:
      # https://github.com/aws/amazon-eks-pod-identity-webhook/issues/30#issuecomment-605553411
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "${IamOIDCProviderArn}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringEquals": {
                            "${OIDCProviderEndpoint}:aud": "sts.amazonaws.com",
                            "${OIDCProviderEndpoint}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
                        }
                    }
                }
            ]
          }
        - {
            "IamOIDCProviderArn": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OIDCProviderId}" },
            "OIDCProviderEndpoint": { "Ref": "OIDCProviderId" }
          }

  EKSLoadBalancerControllerPolicy:
    Type: AWS::IAM::Policy
    Description: IAM policy for ALB Controller
    Properties:
      PolicyName: EKSLoadBalancerControllerPolicy
      Roles:
        - !Ref EKSLoadBalancerControllerRole
      PolicyDocument:
        - |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "iam:CreateServiceLinkedRole"
                      ],
                      "Resource": "*",
                      "Condition": {
                          "StringEquals": {
                              "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:DescribeAccountAttributes",
                          "ec2:DescribeAddresses",
                          "ec2:DescribeAvailabilityZones",
                          "ec2:DescribeInternetGateways",
                          "ec2:DescribeVpcs",
                          "ec2:DescribeVpcPeeringConnections",
                          "ec2:DescribeSubnets",
                          "ec2:DescribeSecurityGroups",
                          "ec2:DescribeInstances",
                          "ec2:DescribeNetworkInterfaces",
                          "ec2:DescribeTags",
                          "ec2:GetCoipPoolUsage",
                          "ec2:DescribeCoipPools",
                          "elasticloadbalancing:DescribeLoadBalancers",
                          "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          "elasticloadbalancing:DescribeListeners",
                          "elasticloadbalancing:DescribeListenerCertificates",
                          "elasticloadbalancing:DescribeSSLPolicies",
                          "elasticloadbalancing:DescribeRules",
                          "elasticloadbalancing:DescribeTargetGroups",
                          "elasticloadbalancing:DescribeTargetGroupAttributes",
                          "elasticloadbalancing:DescribeTargetHealth",
                          "elasticloadbalancing:DescribeTags"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cognito-idp:DescribeUserPoolClient",
                          "acm:ListCertificates",
                          "acm:DescribeCertificate",
                          "iam:ListServerCertificates",
                          "iam:GetServerCertificate",
                          "waf-regional:GetWebACL",
                          "waf-regional:GetWebACLForResource",
                          "waf-regional:AssociateWebACL",
                          "waf-regional:DisassociateWebACL",
                          "wafv2:GetWebACL",
                          "wafv2:GetWebACLForResource",
                          "wafv2:AssociateWebACL",
                          "wafv2:DisassociateWebACL",
                          "shield:GetSubscriptionState",
                          "shield:DescribeProtection",
                          "shield:CreateProtection",
                          "shield:DeleteProtection"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:AuthorizeSecurityGroupIngress",
                          "ec2:RevokeSecurityGroupIngress"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:CreateSecurityGroup"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:CreateTags"
                      ],
                      "Resource": "arn:aws:ec2:*:*:security-group/*",
                      "Condition": {
                          "StringEquals": {
                              "ec2:CreateAction": "CreateSecurityGroup"
                          },
                          "Null": {
                              "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:CreateTags",
                          "ec2:DeleteTags"
                      ],
                      "Resource": "arn:aws:ec2:*:*:security-group/*",
                      "Condition": {
                          "Null": {
                              "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                              "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:AuthorizeSecurityGroupIngress",
                          "ec2:RevokeSecurityGroupIngress",
                          "ec2:DeleteSecurityGroup"
                      ],
                      "Resource": "*",
                      "Condition": {
                          "Null": {
                              "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "elasticloadbalancing:CreateLoadBalancer",
                          "elasticloadbalancing:CreateTargetGroup"
                      ],
                      "Resource": "*",
                      "Condition": {
                          "Null": {
                              "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "elasticloadbalancing:CreateListener",
                          "elasticloadbalancing:DeleteListener",
                          "elasticloadbalancing:CreateRule",
                          "elasticloadbalancing:DeleteRule"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "elasticloadbalancing:AddTags",
                          "elasticloadbalancing:RemoveTags"
                      ],
                      "Resource": [
                          "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                      ],
                      "Condition": {
                          "Null": {
                              "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                              "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "elasticloadbalancing:AddTags",
                          "elasticloadbalancing:RemoveTags"
                      ],
                      "Resource": [
                          "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                          "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                          "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                          "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                      ]
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          "elasticloadbalancing:SetIpAddressType",
                          "elasticloadbalancing:SetSecurityGroups",
                          "elasticloadbalancing:SetSubnets",
                          "elasticloadbalancing:DeleteLoadBalancer",
                          "elasticloadbalancing:ModifyTargetGroup",
                          "elasticloadbalancing:ModifyTargetGroupAttributes",
                          "elasticloadbalancing:DeleteTargetGroup"
                      ],
                      "Resource": "*",
                      "Condition": {
                          "Null": {
                              "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "elasticloadbalancing:RegisterTargets",
                          "elasticloadbalancing:DeregisterTargets"
                      ],
                      "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "elasticloadbalancing:SetWebAcl",
                          "elasticloadbalancing:ModifyListener",
                          "elasticloadbalancing:AddListenerCertificates",
                          "elasticloadbalancing:RemoveListenerCertificates",
                          "elasticloadbalancing:ModifyRule"
                      ],
                      "Resource": "*"
                  }
              ]
          }

  # https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/aws.md
  ExternalDNSRole:
    Type: AWS::IAM::Role
    Description: IAM Role for ExternalDNS
    Properties:
      # https://stackoverflow.com/a/67400755/5740031
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "${IamOIDCProviderArn}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringEquals": {
                            "${OIDCProviderEndpoint}:aud": "sts.amazonaws.com",
                            "${OIDCProviderEndpoint}:sub": "system:serviceaccount:kube-system:external-dns"
                        }
                    }
                }
            ]
          }
        - {
            "IamOIDCProviderArn": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OIDCProviderId}" },
            "OIDCProviderEndpoint": { "Ref": "OIDCProviderId" }
          }

  EKSAllowExternalDNSUpdatesPolicy:
    Type: AWS::IAM::Policy
    Description: Allows ExternalDNS to update Route53 Resource Record Sets and Hosted Zones
    Properties:
      PolicyName: EKSAllowExternalDNSUpdatesPolicy
      Roles:
        - !Ref ExternalDNSRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - route53:ChangeResourceRecordSets
          Resource: "arn:aws:route53:::hostedzone/*"
        - Effect: Allow
          Action:
          - route53:ListHostedZones
          - route53:ListResourceRecordSets
          Resource: "*"

Outputs: 
  EKSLoadBalancerControllerRoleArn:
    Description: ARN of created EKSLoadBalancerControllerRole
    Value: !GetAtt EKSLoadBalancerControllerRole.Arn

  ExternalDNSRoleArn:
    Description: ARN of created ExternalDNSRole
    Value: !GetAtt ExternalDNSRole.Arn
